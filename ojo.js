/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ojoparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ojo":3,"path":4,"EOF":5,"DOT":6,"ID":7,"INT":8,"LBRACK":9,"RBRACK":10,"STR":11,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"DOT",7:"ID",8:"INT",9:"LBRACK",10:"RBRACK",11:"STR"},
productions_: [0,[3,2],[4,3],[4,3],[4,4],[4,4],[4,4],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-2]; this.$.push(new  Name($$[$0], loc(_$[$0-2], _$[$0]))); 
break;
case 3: this.$ = $$[$0-2]; this.$.push(new Slice($$[$0], loc(_$[$0-2], _$[$0]))); 
break;
case 4: this.$ = $$[$0-3]; this.$.push(new Slice($$[$0-1], "int", loc(_$[$0-3], _$[$0]))); 
break;
case 5: this.$ = $$[$0-3]; this.$.push(new Slice($$[$0-1], "str", loc(_$[$0-3], _$[$0]))); 
break;
case 6: this.$ = $$[$0-3]; this.$.push(new Slice($$[$0-1], "path", loc(_$[$0-3], _$[$0]))); 
break;
case 7: this.$ = [new Name($$[$0], loc(_$[$0], _$[$0]))]; 
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},{5:[1,4],6:[1,5],9:[1,6]},{5:[2,7],6:[2,7],9:[2,7],10:[2,7]},{1:[2,1]},{7:[1,7],8:[1,8]},{4:11,7:[1,3],8:[1,9],11:[1,10]},{5:[2,2],6:[2,2],9:[2,2],10:[2,2]},{5:[2,3],6:[2,3],9:[2,3],10:[2,3]},{10:[1,12]},{10:[1,13]},{6:[1,5],9:[1,6],10:[1,14]},{5:[2,4],6:[2,4],9:[2,4],10:[2,4]},{5:[2,5],6:[2,5],9:[2,5],10:[2,5]},{5:[2,6],6:[2,6],9:[2,6],10:[2,6]}],
defaultActions: {4:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function loc(start, end) {
  return [end.first_column, end.last_column];
};

function Name(value, loc) {
  this.value = value;
  this.loc = loc;
}

function Slice(value, type, loc) {
  this.value = value;
  this.type = type;
  this.loc = loc;
}

parser.ast = {};
parser.ast.loc = loc;
parser.ast.Name = Name;
parser.ast.Slice = Slice;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "EOF";
break;
case 1:return "DOT";
break;
case 2:return "LBRACK";
break;
case 3:return "RBRACK";
break;
case 4:return "ID";
break;
case 5:return "INT";
break;
case 6:yy_.yytext = yy_.yytext.slice(1, -1); return "STR";
break;
}
},
rules: [/^(?:$)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:([a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ojoparser;
exports.Parser = ojoparser.Parser;
exports.parse = function () { return ojoparser.parse.apply(ojoparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/*
  ojo.js
  2015-04-02

  author: Chad Angelelli <chad.angelelli@gmail.com>

  description:
    Ojo (spanish "eye") is a small interpreter for looking up variables by string. 
    It makes a few guesses about what it is asked to reference and attempts to optimize 
    the query either by manually looking up a variable in simple use cases, 
    or by running it through a parser for more advanced ones. 
    If that fails it can optionally attempt to eval() the string.
*/

(function(exports) { 
  'use strict';

  var _isServerSide = typeof require        !== 'undefined' &&
                      typeof module         !== 'undefined' &&
                      typeof module.exports !== 'undefined' ;

  // _______________________________________________________________
  function OjoError(message) {
    this.name = "OjoError";
    this.message = message;
  }
  OjoError.prototype = new Error();
  OjoError.prototype.constructor = OjoError;

  // _______________________________________________________________
  function Ojo(options) {
    var self = this;

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.isServerSide  = _isServerSide;
    this.isClientSide  = !_isServerSide;
    this.options       = options || {};

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    if (!self.isServerSide)
      this.parser = ojoparser;
    else if (typeof ojoparser !== 'undefined')
      this.parser = ojoparser;
    else
      this.parser = require('./ojoparser').parser;

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.needle;
    this.haystack;
    this.components;
    this.numComponents;
    this.algorithm;
    this.ir;
    this.path;
    this.resultSet;
    this.numResults;

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.initVars = function() {
      self.needle        = '';
      self.haystack      = {};
      self.components    = [];
      self.numComponents = 0;
      self.algorithm     = '';
      self.ir            = [];
      self.path          = undefined;
      self.resultSet     = [];
      self.numResults    = 0;
    }; // end Ojo.initVars()

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.get = function(needle, haystack, _skipSettingResult) {
      var components, numComponents, algorithm, path, _n;

      if (!needle.length)
        throw new OjoError('Invalid Ojo needle "{needle}"'.intpol(self));

      components = needle.split('.');
      numComponents = components.length;

      // Simple lookup? (No nested variables.)
      if (needle.indexOf('[') === -1) { 
        if (numComponents < 3) {
          algorithm = 'simple';
          path = self.__simpleLookup(components, haystack);
        } else {
          algorithm = 'loop';
          path = self.__loopLookup(components, haystack);
        }

      } else if (/\[[a-zA-Z]/.test(needle)) { // Query has nested vars, use parser and/or eval.
        algorithm = 'advanced';

        /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         * This block is unfinished. 
         * Pushing to allow more basic features to be used.
         * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
         */
        throw new OjoError("Ojo Advanced algorithm unfinshed. Can't have nested vars yet!");

      } else { // No nested vars. Convert brackets to dot notation and call get()
        _n = needle.replace(/[\]"']/g, '').replace('[', '.');
        path = self.get(_n, haystack, true);
      }

      // internal call? return value.
      if (_skipSettingResult)
        return path;

      // reset vars.
      self.initVars();
      // set specific values needed.
      self.needle = needle;
      self.haystack = haystack;
      self.path = path;
      self.components = components; 
      self.numComponents = numComponents;
      self.algorithm = algorithm;

      if (!path)
        return;
      // else
      self.resultSet = self.path; 
      return self;
    }; // end Ojo.get()

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.result = function() {
      return self.resultSet;
    };

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.filter = function(keyOrVal, val) {
      var key, _isArr, _isObj, res;

      if (!self.resultSet)
        throw new OjoError('No result set for Ojo.filter(). Call Ojo.get() first');

      _isObj = isObj(self.resultSet);
      _isArr = !_isObj && isArr(self.resultSet);

      if (!_isArr && !_isObj)
        throw new OjoError('Ojo.filter() requires an array or object');

      if (typeof val !== 'undefined')
        key = keyOrVal;
      else
        val = keyOrVal;

      if (_isArr) {
        if (typeof key === 'undefined')
          res = self.__filterArray(val); 
        else
          res = self.__filterArrayOfObjects(key, val);
      } else {
        res = self.__filterObject(key, val);
      }

      self.resultSet = res;
      return self;
    }; // end Ojo.filter()
    
    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.__simpleLookup = function(components, haystack) {
      var path;
 
      switch (components.length) {
      case 1:
        path = haystack[components[0]] || undefined;
        break;
      case 2:
        path = haystack[components[0]] || undefined;
        path = path ? path[components[1]] : undefined;
        break;
      }
 
      return path;
    }; // end Ojo.__simpleLookup()
 
    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.__loopLookup = function(components, haystack) {
      var i, c, path;

      i = 0;
      path = haystack;

      while (c = components[i]) {
        if (!(c in path)) {
          path = undefined;
          break;
        }
        path = path[c];
        i++;
      }

      return path;
    }; // end Ojo.__loopLookup()

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.__filterArray = function(val) {
      var i, e, res;

      i = 0;
      res = [];
      if (val instanceof RegExp) {
        while (e = self.resultSet[i]) {
          if (val.test(e))
            res.push(e);
          i++;
        }
      } else if (typeof val === 'function') {
        while (e = self.resultSet[i]) {
          if (val(e))
            res.push(e);
          i++;
        }
      } else {
        while (e = self.resultSet[i]) {
          if (e == val)
            res.push(e);
          i++;
        }
      }

      if (res.length == 0)
        return;
      return res;
    } // end Ojo.__filterArray()

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.__filterObject = function(key, val) {
      var set, target;

      set = self.resultSet;
      target = self.get(key, set, true);

      if (target) {
        if (val instanceof RegExp && val.test(target)) {
          return set;
        } else if (typeof val === 'function' && val(target)) {
          return set;
        } else if (target == val) {
          return set;
        }
      }
      return;
    } // end Ojo.__filterObject()

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.__filterArrayOfObjects = function(key, val) {
      var i, e, target, res;

      if (!isObj(self.resultSet[0]))
        throw new OjoError('key/value can only be passed to Ojo.filter() for an array of objects');

      res = [];
      if (val instanceof RegExp) {
        i = 0;
        while (e = self.resultSet[i]) {
          if (!isObj(e))
            throw new OjoError('Invalid element at index ' + i + ' in Ojo.filter(). Must be object');
          target = self.get(key, e, true);
          if (key in e && val.test(target))
            res.push(e);
          i++;
        }
      } else if (typeof val === 'function') {
        i = 0;
        while (e = self.resultSet[i]) {
          target = self.get(key, e, true);
          if (val(target))
            res.push(e);
          i++;
        }
      } else {
        i = 0;
        while (e = self.resultSet[i]) {
          if (!isObj(e))
            throw new OjoError('Invalid element at index ' + i + ' in Ojo.filter(). Must be object');
          target = self.get(key, e, true);
          if (typeof target !== 'undefined' && target == val)
            res.push(e);
          i++;
        }
      }

      if (res.length == 0)
        return;
      return res;
    } // end Ojo.__filterArrayOfObjects()

  } // end Ojo()

  // _______________________________________________________________
  String.prototype.intpol = function(o) {
    return this.replace(/{([^{}]*)}/g, function (a, b) {
      var r = o[b];
      return typeof r === 'string' || typeof r === 'number' ? r : a;
    });
  }; 

  // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
  function isArr(v) { 
    return Object.prototype.toString.call(v) === '[object Array]'; 
  }

  // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
  function isObj(v)  { 
    return Object.prototype.toString.call(v) === '[object Object]'; 
  }

  // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
  function print() {
    Function.apply.call(console.log, console, arguments);
  }

  // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
  function jprint(x) {
    console.log(JSON.stringify(x, null, 4));
  }

  // _______________________________________________________________
  if (_isServerSide) {
    exports['Ojo'] = Ojo;
    exports['OjoError'] = OjoError;
  } else {
    window['Ojo'] = Ojo;
    window['OjoError'] = OjoError;
  }

}(typeof exports === 'undefined' ? {} : exports));
